
 1,down loas node.js

2,create koa2_basic folder

3,npm init 

4,npm install koa --save

5,create app.js file

6,add code to app.js file

7, create model ,view ,control　folder

 npm install koa-router --save


要想再html文件里面写代码就要引入模板引擎

 npm install --save art-template
 npm install --save koa-art-template


//要想再模板引擎里面导入css 图片之类的就要引入这个
npm install  koa-static --save


//连接数据库
npm install mongodb　--save

//解析传过来的表格里的数据
npm install koa-bodyparser --save


    一定要注意。 app.js里的 app.use(koaBodyparser());一定要在所有路由的最前面。
    app.use(koaBodyparser());
    app.use(admin); 


//使用session
npm install koa-session --save

    一定要注意app.js配置文件一定要 使用中间件之前
    ---------------------------------------------------------
        //配置静态资源路径
        app.use(static(__dirname+'/static_asset'));


        //配置跟使用session
        app.keys = ['some secret hurr'];
        const CONFIG = {
            key: 'koa:sess', 
            maxAge: 86400000,
            overwrite: true, /** (boolean) can overwrite or not (default true) */
            httpOnly: true, /** (boolean) httpOnly or not (default true) */
            signed: true, /** (boolean) signed or not (default true) */
            rolling: true, /** (boolean) Force a session identifier cookie to be set on every response. The expiration is reset to the original maxAge, resetting the expiration countdown. (default is false) */
            renew: false, /** (boolean) renew session when session is nearly expired, so we can always keep user logged in. (default is false)*/
        };
        app.use(session(CONFIG, app));


        //使用中间件。
        app.use(koaBodyparser());
        app.use(admin); 
    --------------------------------------------------------------------

//密码加密
npm install md5 --save


//使用silly-datatime格式化日期。通过过滤器(管道)来格式化日期。
npm i silly-datetime --save


//导入koa-jsonp 支持json request
//用ajax来请求数据的时候必须返回的是json
//为了让koa支持json就必须安装koa-jsonp
  npm install koa-jsonp


//如何导入xmlhttprequest，来实现ajax请求
XMLHttpRequest is a built-in object in web browsers.
It is not distributed with Node; you have to install it separately,
Install it with npm,


npm install xmlhttprequest --save

var XMLHttpRequest = require("xmlhttprequest").XMLHttpRequest;
var xhr = new XMLHttpRequest();

 static_asset/my_tools/ajax_request.js 文件里濡染用到了xmlhttprequest 
 但是因为 ajax_request.js文件要导入到html文件里面去，所以就不需要install xmlhttprequest


//添加上传图片的包



//添加富文本编辑器
npm install  ko2-ueditor --save;



---------------------------------
编辑文章。




------------------------------------------------------------------------
显示封面图片的时候出了一个问题。
显示图片的时候如果这样写

<br/>
    <img src="{{article.img_url}}" alt="">
<br/>

测试的时候显示的url就是
<img src="static_asset\article_cover_picture\1587821473540.png" alt="">
根本找不到图片。所以一定要写绝对路径。(为什么一定要写绝对路径？？？？)

写绝对路径的时候要这样写，

<br/>
    <img src="{{__HOST__}}/{{article.img_url}}" alt="">
<br/>

测试的时候显示的是
<img src="http://localhost:3001/static_asset\article_cover_picture\1587821473540.png" alt="">


但仅仅这样还是不够的
我一开始设置静态资源的时候。设定的是

app.use(static(__dirname+'/static_asset'));

这句话的意思是去static_asset文件里面才能取出图片。
但是static_asset文件夹里面没有 static_asset\article_cover_picture 文件夹。所以取不出图片来。

因为静态资源可以可以设置多个。
我在添加一个
app.use(static("."));

这样就可以在根目录下取出文件了。

但是这样做有一点不好。就是
别人也就可以通过 http://localhost:3001/app.js 查看到 我的 源代码。这是很不安全的。

最安全的做法就是。在向数据库放入封面图片的时候将 

static_assetarticle_cover_picture\1587821473540.png 

中的 static_asset 去掉，只放入 

article_cover_picture\1587821473540.png

就可以把url做成，下面这个样子来取图片了，

<img src="http://localhost:3001/article_cover_picture\1587821473540.png" alt="">

也就不用 添加 app.use(static(".")); 程序也就不会变得不安全了。

我因为是写自己的练习项目所以我选择添加 app.use(static("."));

因为这样写得快一点。


----------------------------------------------
向富文本编辑器里添加 数据。


	var ue = UE.getEditor('editor');

    //给富文本编辑器提供数据库里取出得内容
    ue.addListener("ready",function(){
        ue.setContent(`{{@article.content}}`);  //这里必须用es6的模板字符串，并将数据原样输出。
    })
