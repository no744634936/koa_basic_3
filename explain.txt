
 1,down loas node.js

2,create koa2_basic folder

3,npm init 

4,npm install koa --save

5,create app.js file

6,add code to app.js file

7, create model ,view ,control　folder

 npm install koa-router --save


要想再html文件里面写代码就要引入模板引擎

 npm install --save art-template
 npm install --save koa-art-template


//要想再模板引擎里面导入css 图片之类的就要引入这个
npm install  koa-static --save


//连接数据库
npm install mongodb　--save

//解析传过来的表格里的数据
npm install koa-bodyparser --save


    一定要注意。 app.js里的 app.use(koaBodyparser());一定要在所有路由的最前面。
    app.use(koaBodyparser());
    app.use(admin); 


//使用session
npm install koa-session --save

    一定要注意app.js配置文件一定要 使用中间件之前
    ---------------------------------------------------------
        //配置静态资源路径
        app.use(static(__dirname+'/static_asset'));


        //配置跟使用session
        app.keys = ['some secret hurr'];
        const CONFIG = {
            key: 'koa:sess', 
            maxAge: 86400000,
            overwrite: true, /** (boolean) can overwrite or not (default true) */
            httpOnly: true, /** (boolean) httpOnly or not (default true) */
            signed: true, /** (boolean) signed or not (default true) */
            rolling: true, /** (boolean) Force a session identifier cookie to be set on every response. The expiration is reset to the original maxAge, resetting the expiration countdown. (default is false) */
            renew: false, /** (boolean) renew session when session is nearly expired, so we can always keep user logged in. (default is false)*/
        };
        app.use(session(CONFIG, app));


        //使用中间件。
        app.use(koaBodyparser());
        app.use(admin); 
    --------------------------------------------------------------------

//密码加密
npm install md5 --save


//使用silly-datatime格式化日期。通过过滤器(管道)来格式化日期。
npm i silly-datetime --save


//导入koa-jsonp 支持json request
//用ajax来请求数据的时候必须返回的是json
//为了让koa支持json就必须安装koa-jsonp
  npm install koa-jsonp


//如何导入xmlhttprequest，来实现ajax请求
XMLHttpRequest is a built-in object in web browsers.
It is not distributed with Node; you have to install it separately,
Install it with npm,


npm install xmlhttprequest --save

var XMLHttpRequest = require("xmlhttprequest").XMLHttpRequest;
var xhr = new XMLHttpRequest();

 static_asset/my_tools/ajax_request.js 文件里濡染用到了xmlhttprequest 
 但是因为 ajax_request.js文件要导入到html文件里面去，所以就不需要install xmlhttprequest


//添加上传图片的包


//添加富文本编辑器
npm install  ko2-ueditor --save;



---------------------------------
使用koa-jsonp 来写API接口


1，首先在 静态资源文件夹(static_asset)里面有一个ajax文件夹，ajax文件夹里有一个ajax_get.html 文件
   这个ajax_get.html 文件是通过jq的 ajax 来请求数据的，

   这个时候 ajax_get.html 就是前端(服务端)
   打开url  :   http://localhost:3001/ajax/ajax_get.html
   点击请求数据按钮，就可以在控制台 看到数据了。

   因为前端页面 ajax_get.html 和后端接口都在同一个项目里面，所以这种ajax请求叫做同源请求。（我自己取的名叫做同源请求）
   如果将ajax_get.html文件和js文件夹移出项目文件夹。
   放到电脑的桌面上，或者任意一个文件夹里，浏览器打开ajax_get.html文件，点击请求数据按钮。会出现一个错误

   ajax_get.html:1 Access to XMLHttpRequest at 'http://localhost:3001/api/catelist' from origin 'null' has been blocked by CORS policy: 
   No 'Access-Control-Allow-Origin' header is present on the requested resource.

   这是浏览器的同源策略导致跨域问题
   什么情况存在跨域？
   域名  端口 协议 任意一个不一样就存在跨域



2，那么如何进行跨域请求呢？
  一种是jsonp 来跨域请求
  jsonp的原理 ：利用script src可以跨域的特性
  

    1.本地写一个回调函数

    2、在远程执行这个回调函数，把远程的数据传到本地 
    ( 
        说白了就是，使用api接口时，在 url后面加上一个callback参数。
        就像这样
        http://localhost:3001/api/catelist?callback=XXX

        我在浏览器里输入http://localhost:3001/api/catelist?callback=xxx
        它就会自动把数据当作参数放进xxx() 的括号里面去。
        记住一定要写callback=,这是规定。

    )

    static_asset/ajax/ajax_jsonp1.html 是利用js写的原生ajax跨域请求。
    使用(http://localhost:3001/ajax/ajax_jsonp1.html) 进行同域请求没有问题。
    将ajax_jsonp1.html 文件移到项目文件夹外单独用浏览器打开也可以进行异域请求。


    ajax_jsonp2.html 文件使用JQuery写的跟 ajax_jsonp1.html 文件是一样的，

	前提条件是服务器必须支持jsonp，因为我引入了koa-jsonp,所以服务器是支持jsonp的。

第二种跨域请求是后台允许跨域，使用koa-cors 中间件就可以使后台允许跨域了。
详见下一章节